name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests (NestJS)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: supplysync_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: backend
        run: npx prisma generate

      - name: Run Prisma migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/supplysync_test
        run: npx prisma migrate deploy

      - name: Lint backend
        working-directory: backend
        run: npm run lint

      - name: Run backend tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/supplysync_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm test

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests (Next.js)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint frontend
        working-directory: frontend
        run: npm run lint

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --passWithNoTests

  # ML Service Tests
  ml-tests:
    name: ML Service Tests (Python)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ml-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run ML tests
        working-directory: ml-service
        run: pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./ml-service/coverage.xml
          flags: ml-service
          name: ml-service-coverage

  # ERP Connectors Tests
  erp-connectors-tests:
    name: ERP Connectors Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ERP connectors dependencies
        working-directory: integrations/erp-connectors
        run: npm ci

      - name: Build ERP connectors
        working-directory: integrations/erp-connectors
        run: npm run build

      - name: Lint ERP connectors
        working-directory: integrations/erp-connectors
        run: npm run lint

      - name: Run unit tests
        working-directory: integrations/erp-connectors
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm test -- --testPathIgnorePatterns=integration

  # Orchestrator Tests
  orchestrator-tests:
    name: Orchestrator Tests (Multi-Agent)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install orchestrator dependencies
        working-directory: agents/orchestrator
        run: npm ci

      - name: Build orchestrator
        working-directory: agents/orchestrator
        run: npm run build

      - name: Run orchestrator tests
        working-directory: agents/orchestrator
        run: npm test -- --passWithNoTests

  # Build Check
  build-all:
    name: Build All Services
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ml-tests, erp-connectors-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install all dependencies
        run: npm ci

      - name: Build all TypeScript projects
        run: |
          cd backend && npm ci && npm run build
          cd ../frontend && npm ci && npm run build
          cd ../integrations/erp-connectors && npm ci && npm run build
          cd ../../../agents/orchestrator && npm ci && npm run build

      - name: Build ML service
        working-directory: ml-service
        run: |
          pip install -r requirements.txt
          python -m py_compile src/*.py src/**/*.py

      - name: Verify builds
        run: |
          test -d backend/dist || exit 1
          test -d frontend/.next || exit 1
          test -d integrations/erp-connectors/dist || exit 1
          test -d agents/orchestrator/dist || exit 1
          echo "âœ… All builds successful"

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          cd backend && npm audit --audit-level=moderate || true
          cd ../frontend && npm audit --audit-level=moderate || true

      - name: Run Python security check
        working-directory: ml-service
        run: |
          pip install safety
          safety check --json || true

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint
        run: |
          cd backend && npm ci && npm run lint
          cd ../frontend && npm ci && npm run lint
          cd ../integrations/erp-connectors && npm ci && npm run lint

      - name: TypeScript type check
        run: |
          cd backend && npx tsc --noEmit
          cd ../frontend && npx tsc --noEmit
          cd ../integrations/erp-connectors && npx tsc --noEmit
